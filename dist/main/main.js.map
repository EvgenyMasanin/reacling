{"mappings":"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","sources":["scripts/main.ts","services/cli/index.ts","services/cli/cli.ts","utils/loggers/index.ts","utils/loggers/logger.ts","scripts/constants/index.ts","utils/strings/to-singular.ts","utils/loggers/write-help.ts","services/config/types.ts","utils/strings/index.ts","utils/strings/to-camel-case.ts","utils/strings/capitalize-first.ts","utils/strings/path-transform.ts","services/config/index.ts","services/config/config.service.ts","utils/deep-merge.ts","utils/file-system/go-up-folder.ts","services/config/default.config.ts","services/dialog/index.ts","services/dialog/dialog.service.ts","services/dialog/dialogs/index.ts","services/dialog/dialogs/ask-about-configuration.dialog.ts","services/dialog/dialogs/question/witch-methodology.question.ts","utils/inquirer/create-prompt.ts","services/dialog/dialogs/question/is-provide-own-structure.question.ts","services/dialog/answers/index.ts","services/dialog/answers/simple-answers.ts","services/dialog/dialogs/question/witch-segments-generate.question.ts","services/dialog/helpers/generate-layer-config.ts","services/dialog/dialogs/question/should-generate-default-config.question.ts","utils/file-system/index.ts","utils/file-system/append-to-index.ts","utils/file-system/create-component-files.ts","scripts/project-generators/simple-structure/content-generators/index.ts","scripts/project-generators/simple-structure/content-generators/common/index.ts","scripts/project-generators/simple-structure/content-generators/common/generate-directory-path.ts","scripts/project-generators/simple-structure/content-generators/common/generate-index-content.ts","scripts/project-generators/simple-structure/content-generators/react/index.ts","scripts/project-generators/simple-structure/content-generators/react/generate-component-content.ts","scripts/templates/index.ts","scripts/templates/react-component.template.ts","scripts/templates/feature-index.template.ts","scripts/templates/hook.template.ts","scripts/templates/page.template.ts","scripts/templates/root-reducer.template.ts","scripts/templates/redux-store.template.ts","scripts/project-generators/simple-structure/content-generators/react/generate-page-content.ts","scripts/project-generators/simple-structure/content-generators/react/generate-hook-content.ts","utils/file-system/create-file.ts","utils/file-system/create-file-if-not-exist.ts","utils/file-system/is-dir-exist.ts","utils/file-system/is-file-exist.ts","utils/file-system/mkdir-if-not-exist.ts","utils/file-system/remove-dir.ts","scripts/errors/index.ts","scripts/errors/handle-fail.ts","scripts/errors/errors.ts","scripts/executors/types.ts","scripts/executors/fsd-execute/index.ts","scripts/executors/fsd-execute/fsd-execute.ts","scripts/executors/fsd-execute/commands.ts","scripts/project-generators/fsd-structure/entity/index.ts","scripts/project-generators/fsd-structure/entity/entity-component-generator.ts","scripts/project-generators/fsd-structure/slice/slice-component-generator.ts","scripts/project-generators/fsd-structure/slice/helpers/index.ts","scripts/project-generators/fsd-structure/slice/helpers/get-layer-folder-path.ts","scripts/project-generators/fsd-structure/slice/helpers/get-layer-path.ts","scripts/project-generators/fsd-structure/slice/helpers/create-lib.ts","scripts/project-generators/fsd-structure/slice/helpers/create-ui.ts","scripts/project-generators/fsd-structure/entity/entity-generator.ts","scripts/project-generators/fsd-structure/slice/slice-generator.ts","scripts/project-generators/fsd-structure/feature/index.ts","scripts/project-generators/fsd-structure/feature/feature-component-generator.ts","scripts/project-generators/fsd-structure/feature/feature-generator.ts","scripts/project-generators/fsd-structure/init-project.ts","scripts/project-generators/fsd-structure/page-generator.ts","scripts/project-generators/fsd-structure/widget-generator.ts","scripts/project-generators/fsd-structure/shared-component-generator.ts","scripts/executors/simple-execute.ts/simple-execute.ts","scripts/executors/simple-execute.ts/commands.ts","scripts/project-generators/simple-structure/component-generators/index.ts","scripts/project-generators/simple-structure/component-generators/generate-component.ts","scripts/project-generators/simple-structure/component-generators/generate-page.ts","scripts/project-generators/simple-structure/component-generators/generate-hook.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport boxen from 'boxen'\r\nimport { cli } from '@services/cli'\r\nimport { logger } from '@utils/loggers'\r\nimport { configService } from '@services/config'\r\nimport { dialogService } from '@services/dialog'\r\nimport { mkdirIfNotExist } from '@utils/file-system'\r\nimport { padding } from '@scripts/constants/index'\r\n\r\nimport chalk from 'chalk'\r\n\r\nimport { handleFail } from './errors'\r\nimport { Folder } from './constants'\r\nimport { allAvailableCommands } from './executors/types'\r\nimport { fsdExecute } from './executors/fsd-execute'\r\nimport { simpleExecute } from './executors/simple-execute.ts/simple-execute'\r\n\r\nimport type { AllAvailableCommands } from './executors/types'\r\n// import { generateStore } from './utils/redux-generators'\r\n\r\nfunction start() {\r\n  const methodology = {\r\n    fsd: fsdExecute,\r\n    simple: simpleExecute\r\n  }\r\n\r\n  if (process.argv[2] === '--help') {\r\n    logger.writeHelp(configService.methodology)\r\n    return\r\n  }\r\n\r\n  cli.yargs\r\n    .wrap(100)\r\n    .help('extended-help')\r\n    .showHelpOnFail(false)\r\n    .scriptName('reacling')\r\n    .usage('Usage: $0 <command>')\r\n    .middleware((props) => {\r\n      const inputCommand = props._[0] as AllAvailableCommands\r\n      if (inputCommand && !allAvailableCommands.includes(inputCommand)) {\r\n        logger.pushUnknownCommandLog(inputCommand)\r\n        throw new Error()\r\n      }\r\n      if (inputCommand === 'config') return\r\n      if (!inputCommand.length) return\r\n      mkdirIfNotExist('.', Folder.src)\r\n    })\r\n    .fail(handleFail)\r\n    .command({\r\n      command: 'config',\r\n      describe: 'Use to generate config.json',\r\n      handler: async () => {\r\n        console.log(\r\n          chalk.blueBright(\r\n            boxen('Generating config file...', { title: 'Reacling', padding })\r\n          )\r\n        )\r\n        configService.overwriteUserConfig(\r\n          await dialogService.askAboutConfiguration()\r\n        )\r\n        logger.pushSuccessLog('Config file has been generated!')\r\n      }\r\n    })\r\n\r\n  methodology[configService.methodology]()\r\n\r\n  cli.yargs\r\n    .parseAsync()\r\n    .then(() => {\r\n      logger.writeLogs()\r\n    })\r\n    .catch(() => {})\r\n}\r\n\r\ntry {\r\n  start()\r\n} catch (error) {\r\n  logger.writeLogs()\r\n}\r\n","export * from './cli'\r\n","import yargs from 'yargs'\r\nimport { hideBin } from 'yargs/helpers'\r\n\r\nimport type { AvailableFsdCommands } from '@scripts/executors/types'\r\n\r\nconst args = hideBin(process.argv)\r\n\r\nexport const cli = {\r\n  yargs,\r\n  args,\r\n  inputCommand: args[0] as AvailableFsdCommands\r\n}\r\n","export * from './logger'\r\n","import boxen from 'boxen'\r\nimport { Status } from '@scripts/constants'\r\nimport { padding } from '@scripts/constants/index'\r\nimport { toSingular } from '@utils/strings/to-singular'\r\n\r\nimport chalk from 'chalk'\r\n\r\nimport { writeHelp } from './write-help'\r\nimport { capitalizeFirst } from '../strings'\r\nimport { pathTransform } from '../strings/path-transform'\r\n\r\nimport type { MethodologyEnum } from '@services/config/types'\r\n\r\nconst isSuccess = (status: Status) => status === Status.success\r\n\r\nclass Logger {\r\n  readonly #successLogs: string[] = []\r\n  readonly #errorLogs: string[] = []\r\n  readonly #commonLogs: string[] = []\r\n\r\n  log(status: Status, log: string) {}\r\n\r\n  pushLog(status: Status, log: string) {\r\n    const transformedLog = pathTransform(log)\r\n    isSuccess(status)\r\n      ? this.#successLogs.push(transformedLog)\r\n      : this.#errorLogs.push(transformedLog)\r\n  }\r\n\r\n  pushCommonLog(log: string) {\r\n    this.#commonLogs.push(pathTransform(log))\r\n  }\r\n\r\n  pushErrorLog(log: string) {\r\n    this.pushLog(Status.error, pathTransform(log))\r\n  }\r\n\r\n  pushSuccessLog(log: string) {\r\n    this.pushLog(Status.success, pathTransform(log))\r\n  }\r\n\r\n  pushAlreadyExistLog(name: string, message: string = '') {\r\n    this.pushLog(\r\n      Status.error,\r\n      `${chalk.underline.italic(name)} ${toSingular(message)} is already exist!`\r\n    )\r\n  }\r\n\r\n  pushNotExistLog(name: string, message: string = '') {\r\n    this.pushLog(\r\n      Status.error,\r\n      `${chalk.underline.italic(name)} ${message} is not exist!`\r\n    )\r\n  }\r\n\r\n  pushUnknownCommandLog(command: string) {\r\n    this.pushLog(Status.error, `Unknown command \"${chalk.italic(command)}\"!`)\r\n  }\r\n\r\n  writeHelp(methodology: MethodologyEnum) {\r\n    writeHelp(methodology)\r\n  }\r\n\r\n  writeLogs() {\r\n    if (this.#successLogs.length > 0) {\r\n      this.#successLog(this.#getLogs(Status.success))\r\n    }\r\n    if (this.#errorLogs.length > 0) {\r\n      this.#errorLog(this.#getLogs(Status.error))\r\n    }\r\n    if (this.#commonLogs.length > 0) {\r\n      console.log(this.#getLogs())\r\n    }\r\n  }\r\n\r\n  #getLogs(status?: Status) {\r\n    if (!status) return this.#commonLogs.join('\\n')\r\n\r\n    return isSuccess(status)\r\n      ? this.#successLogs.join('\\n')\r\n      : this.#errorLogs.join('\\n')\r\n  }\r\n\r\n  #errorLog<T extends string>(content: T) {\r\n    console.log(\r\n      boxen(chalk.redBright(`${content}`), {\r\n        title: `${capitalizeFirst(Status.error)}:`,\r\n        padding,\r\n        borderColor: 'red'\r\n      })\r\n    )\r\n  }\r\n\r\n  #successLog(content: string) {\r\n    console.log(\r\n      boxen(chalk.greenBright(content), {\r\n        title: `${capitalizeFirst(Status.success)}:`,\r\n        padding,\r\n        borderColor: 'green'\r\n      })\r\n    )\r\n  }\r\n}\r\n\r\nexport const logger = new Logger()\r\n","import { join } from 'path'\r\n\r\nexport enum Folder {\r\n  src = 'src',\r\n  hooks = 'hooks',\r\n  components = 'components',\r\n  store = 'redux-store',\r\n  reducers = 'reducers',\r\n\r\n  app = 'app',\r\n  pages = 'pages',\r\n  widgets = 'widgets',\r\n  features = 'features',\r\n  entities = 'entities',\r\n  shared = 'shared',\r\n  providers = 'providers',\r\n\r\n  ui = 'ui',\r\n  assets = 'assets',\r\n  lib = 'lib',\r\n  api = 'api',\r\n  config = 'config',\r\n  types = 'types',\r\n  model = 'model',\r\n  helpers = 'helpers'\r\n}\r\n\r\nexport enum LayerFolder {\r\n  app = 'app',\r\n  pages = 'pages',\r\n  widgets = 'widgets',\r\n  features = 'features',\r\n  entities = 'entities',\r\n  shared = 'shared'\r\n}\r\n\r\nexport enum SegmentFolder {\r\n  ui = 'ui',\r\n  assets = 'assets',\r\n  lib = 'lib',\r\n  api = 'api',\r\n  config = 'config',\r\n  types = 'types',\r\n  model = 'model',\r\n  helpers = 'helpers'\r\n}\r\n\r\nexport const layersFolders = Object.values(LayerFolder)\r\nexport const segmentsFolders = Object.values(SegmentFolder)\r\n\r\nexport const PAGE_FOLDER_PATH = join(Folder.src, Folder.pages)\r\nexport const STORE_FOLDER_PATH = join(Folder.src, Folder.store)\r\nexport const INDEX = 'index.ts'\r\n\r\nexport const REACLING_CONFIG = 'reacling.json'\r\n\r\nexport enum Status {\r\n  success = 'success',\r\n  error = 'error',\r\n  info = 'info'\r\n}\r\n\r\nexport const padding = { top: 0, bottom: 0, left: 2, right: 0 }\r\n","export const toSingular = (str: string) => {\r\n  return str.at(-1) === 's' ? str.slice(0, -1) : str\r\n}\r\n","import boxen from 'boxen'\r\nimport { MethodologyEnum } from '@services/config/types'\r\n\r\nimport type { Options } from 'boxen'\r\n\r\nconst boxenConfig = (title: string): Options => ({\r\n  title,\r\n  titleAlignment: 'center',\r\n  borderColor: 'blueBright'\r\n})\r\n\r\nconst REACT_COMMANDS = boxen(\r\n  `\r\n  Generate a component:              c  'component name' \r\n  Generate a page:                   p  'page name' \r\n  Generate a hook:                   h  'hook name' \r\n  Generate a config file:            config\r\n  Get help:                          --help \r\n  `,\r\n  boxenConfig('React commands')\r\n)\r\n\r\nexport const FSD_REACT_COMMANDS = boxen(\r\n  `\r\n  Generate FSD structure:            init\r\n  Generate a page:                   p    'page name' \r\n  Generate a widget:                 w    'widget name' \r\n  Generate a entity:                 e    'entity name' \r\n  Generate a feature:                f    'feature name' \r\n  Generate a component for shared:   su   'component name'\r\n  Generate a component for entity:   eu   'entity name' 'component name' \r\n  Generate a component for feature:  fu   'feature name' 'component name'\r\n  Generate a config file:            config \r\n  Get help:                          --help \r\n  `,\r\n  boxenConfig('FSD react commands')\r\n)\r\n\r\n// const reduxCommands = `\r\n//   Generate a store: store\r\n//   `\r\n\r\nexport const writeHelp = (methodology: MethodologyEnum) => {\r\n  switch (methodology) {\r\n    case MethodologyEnum.simple:\r\n      console.log(REACT_COMMANDS)\r\n      break\r\n    case MethodologyEnum.fsd:\r\n      console.log(FSD_REACT_COMMANDS)\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n","export interface SliceStructure {\r\n  withApi?: boolean\r\n  withAssets?: boolean\r\n  withConfig?: boolean\r\n  withLib?: boolean\r\n  withTypes?: boolean\r\n  withUi?: boolean\r\n  withModel?: boolean\r\n}\r\n\r\nexport enum MethodologyEnum {\r\n  simple = 'simple',\r\n  fsd = 'fsd'\r\n}\r\n\r\nexport interface ReaclingConfig {\r\n  methodology?: MethodologyEnum\r\n  fsdStructure?: {\r\n    app?: {\r\n      withProviders?: boolean\r\n    }\r\n    entities?: SliceStructure\r\n    features?: SliceStructure\r\n    widgets?: SliceStructure\r\n    pages?: SliceStructure\r\n  }\r\n}\r\n","export * from './to-camel-case'\r\nexport * from './capitalize-first'\r\n","import { capitalizeFirst } from './capitalize-first'\r\n\r\nexport const toCamelCase = (str: string) =>\r\n  str\r\n    .split('-')\r\n    .map((word, i) => (i !== 0 ? capitalizeFirst(word) : word))\r\n    .join('')\r\n","export const capitalizeFirst = (str: string) =>\r\n  str.charAt(0).toUpperCase() + str.slice(1)\r\n","export const pathTransform = (path: string) => {\r\n  return path.replaceAll(/\\\\/g, '/')\r\n}\r\n","import { ConfigService } from './config.service'\r\n\r\nexport const configService = new ConfigService()\r\n","import { join } from 'path'\r\nimport { readFileSync, writeFileSync } from 'fs'\r\nimport { deepMerge } from '@utils/deep-merge'\r\nimport { REACLING_CONFIG } from '@scripts/constants'\r\nimport { goUpFolder } from '@utils/file-system/go-up-folder'\r\n\r\nimport { defaultConfig } from './default.config'\r\n\r\nimport type { Layer } from '@scripts/project-generators/fsd-structure/slice/types'\r\nimport type { MethodologyEnum, ReaclingConfig, SliceStructure } from './types'\r\n\r\nexport class ConfigService {\r\n  readonly #config: ReaclingConfig\r\n\r\n  readonly #userConfigPath = join(__dirname, goUpFolder(4), REACLING_CONFIG)\r\n  readonly #innerConfigPath = join(__dirname, goUpFolder(2), REACLING_CONFIG)\r\n\r\n  constructor() {\r\n    this.#config = deepMerge(\r\n      this.defaultConfig,\r\n      this.userConfig ?? {}\r\n    ) as ReaclingConfig\r\n  }\r\n\r\n  #readConfig(path: string) {\r\n    return JSON.parse(readFileSync(path, 'utf8')) as ReaclingConfig\r\n  }\r\n\r\n  get userConfig() {\r\n    return this.#readConfig(this.#userConfigPath)\r\n  }\r\n\r\n  get innerConfig() {\r\n    return this.#readConfig(this.#innerConfigPath)\r\n  }\r\n\r\n  get defaultConfig() {\r\n    return defaultConfig\r\n  }\r\n\r\n  changeMethodology(methodology: MethodologyEnum) {\r\n    const innerConfig = this.defaultConfig\r\n    innerConfig.methodology = methodology\r\n\r\n    this.overwriteInnerConfig(innerConfig)\r\n  }\r\n\r\n  overwriteInnerConfig(newConfig: ReaclingConfig) {\r\n    writeFileSync(this.#innerConfigPath, JSON.stringify(newConfig, null, 2))\r\n  }\r\n\r\n  overwriteUserConfig(newConfig: ReaclingConfig) {\r\n    writeFileSync(this.#userConfigPath, JSON.stringify(newConfig, null, 2))\r\n  }\r\n\r\n  get methodology() {\r\n    return this.#config.methodology\r\n  }\r\n\r\n  getSliceConfig(layer: Layer): SliceStructure {\r\n    return this.#config.fsdStructure[layer]\r\n  }\r\n\r\n  getAppConfig() {\r\n    return this.#config.fsdStructure.app\r\n  }\r\n}\r\n","type UnknownObject = Record<string, unknown>\r\nfunction isObject(item: unknown): item is UnknownObject {\r\n  return item && typeof item === 'object' && !Array.isArray(item)\r\n}\r\n\r\nexport const deepMerge = (target: unknown, source: unknown) => {\r\n  const targetClone = structuredClone(target)\r\n\r\n  if (!source) return targetClone\r\n\r\n  if (!isObject(targetClone) || !isObject(source)) return targetClone\r\n\r\n  for (const key in source) {\r\n    if (!isObject(source[key])) {\r\n      targetClone[key] = source[key]\r\n      continue\r\n    }\r\n\r\n    if (!targetClone[key]) targetClone[key] = {}\r\n\r\n    deepMerge(targetClone[key], source[key])\r\n  }\r\n  return targetClone\r\n}\r\n","import { join } from 'path'\r\nexport const goUpFolder = (upFolderCount: number) =>\r\n  join(...Array(upFolderCount).fill('..'))\r\n","import { MethodologyEnum } from './types'\r\n\r\nimport type { ReaclingConfig } from './types'\r\n\r\nexport const defaultConfig: ReaclingConfig = {\r\n  methodology: MethodologyEnum.fsd,\r\n  fsdStructure: {\r\n    app: {\r\n      withProviders: true\r\n    },\r\n    pages: {\r\n      withLib: true,\r\n      withUi: true\r\n    },\r\n    widgets: {\r\n      withLib: true,\r\n      withUi: true\r\n    },\r\n    features: {\r\n      withApi: true,\r\n      withLib: true,\r\n      withModel: true,\r\n      withUi: true\r\n    },\r\n    entities: {\r\n      withApi: true,\r\n      withLib: true,\r\n      withModel: true,\r\n      withUi: true\r\n    }\r\n  }\r\n}\r\n","export * from './dialog.service'\r\n","import { askAboutConfiguration } from './dialogs'\r\n\r\nclass DialogService {\r\n  async askAboutConfiguration() {\r\n    return await askAboutConfiguration()\r\n  }\r\n}\r\n\r\nexport const dialogService = new DialogService()\r\n","export * from './ask-about-configuration.dialog'\r\n","import { configService } from '@services/config'\r\nimport { MethodologyEnum } from '@services/config/types'\r\n\r\nimport { witchMethodologyQuestion } from './question/witch-methodology.question'\r\nimport { isProvideOwnStructureQuestion } from './question/is-provide-own-structure.question'\r\nimport { shouldGenerateDefaultConfigQuestion } from './question/should-generate-default-config.question'\r\n\r\nexport async function askAboutConfiguration() {\r\n  const { fsdStructure: defaultFsdStructure } = configService.defaultConfig\r\n\r\n  const isDefault = await shouldGenerateDefaultConfigQuestion()\r\n\r\n  if (isDefault) {\r\n    return configService.defaultConfig\r\n  }\r\n\r\n  const methodology = await witchMethodologyQuestion()\r\n\r\n  if (methodology === MethodologyEnum.simple) {\r\n    return { methodology }\r\n  }\r\n\r\n  const fsdStructure = await isProvideOwnStructureQuestion(defaultFsdStructure)\r\n\r\n  return {\r\n    methodology: MethodologyEnum.fsd,\r\n    fsdStructure\r\n  }\r\n}\r\n","import { MethodologyEnum } from '@services/config/types'\r\nimport { createPrompt } from '@utils/inquirer/create-prompt'\r\n\r\nexport async function witchMethodologyQuestion() {\r\n  const prompt = await createPrompt()\r\n\r\n  const { methodology } = await prompt<{ methodology: MethodologyEnum }>([\r\n    {\r\n      name: 'methodology',\r\n      message: 'Witch methodology you prefer:',\r\n      type: 'list',\r\n      choices: [MethodologyEnum.fsd, MethodologyEnum.simple]\r\n    }\r\n  ])\r\n\r\n  return methodology\r\n}\r\n","export async function createPrompt() {\r\n  return (await import('inquirer')).default.prompt\r\n}\r\n","import { LayerFolder, layersFolders } from '@scripts/constants'\r\nimport { createPrompt } from '@utils/inquirer/create-prompt'\r\n\r\nimport { SimpleAnswerList, simpleAnswerMap } from '../../answers'\r\nimport { witchSegmentsGenerate } from './witch-segments-generate.question'\r\n\r\nimport type { ReaclingConfig } from '@services/config/types'\r\n\r\nimport type { SimpleAnswer } from '../../answers'\r\n\r\nexport async function isProvideOwnStructureQuestion(\r\n  fsdStructure: ReaclingConfig['fsdStructure']\r\n) {\r\n  const prompt = await createPrompt()\r\n\r\n  const config: ReaclingConfig['fsdStructure'] = {}\r\n\r\n  const layersFoldersWithoutShared = layersFolders.filter(\r\n    (layerFolder) => layerFolder !== LayerFolder.shared\r\n  )\r\n\r\n  for (let i = 0; i < layersFoldersWithoutShared.length; i++) {\r\n    const layerFolder = layersFoldersWithoutShared[i]\r\n\r\n    const { isProvideOwnStructure } = await prompt<{\r\n      isProvideOwnStructure: boolean\r\n    }>([\r\n      {\r\n        name: 'isProvideOwnStructure',\r\n        message: `Provide your own structure for ${layerFolder}:`,\r\n        type: 'list',\r\n        choices: SimpleAnswerList,\r\n        filter: (input: SimpleAnswer) => simpleAnswerMap[input]\r\n      }\r\n    ])\r\n\r\n    if (isProvideOwnStructure) {\r\n      config[layerFolder] = await witchSegmentsGenerate(layerFolder)\r\n    } else {\r\n      config[layerFolder] = fsdStructure[layerFolder]\r\n    }\r\n  }\r\n\r\n  return config\r\n}\r\n","export * from './simple-answers'\r\n","export enum SimpleAnswer {\r\n  y = 'Yes',\r\n  n = 'No'\r\n}\r\nexport const SimpleAnswerList = [SimpleAnswer.y, SimpleAnswer.n]\r\n\r\nexport const simpleAnswerMap = {\r\n  Yes: true,\r\n  No: false\r\n}\r\n","import { createPrompt } from '@utils/inquirer/create-prompt'\r\nimport { Folder, LayerFolder, segmentsFolders } from '@scripts/constants'\r\n\r\nimport { generateLayerConfig } from '../../helpers/generate-layer-config'\r\n\r\nimport type { SegmentFolder } from '@scripts/constants'\r\n\r\nexport async function witchSegmentsGenerate(layerFolder: LayerFolder) {\r\n  const prompt = await createPrompt()\r\n\r\n  const message = `Select folders that will be includes in the ${layerFolder} slice folder:`\r\n\r\n  if (layerFolder === LayerFolder.app) {\r\n    const { chosenSegmentsFolders } = await prompt<{\r\n      chosenSegmentsFolders: Folder.providers[]\r\n    }>([\r\n      {\r\n        name: 'chosenSegmentsFolders',\r\n        message,\r\n        type: 'checkbox',\r\n        choices: [{ name: Folder.providers }]\r\n      }\r\n    ])\r\n\r\n    return generateLayerConfig(chosenSegmentsFolders)\r\n  }\r\n\r\n  const { chosenSegmentsFolders } = await prompt<{\r\n    chosenSegmentsFolders: SegmentFolder[]\r\n  }>([\r\n    {\r\n      name: 'chosenSegmentsFolders',\r\n      message,\r\n      type: 'checkbox',\r\n      choices: segmentsFolders.map((segment) => ({\r\n        name: segment\r\n      }))\r\n    }\r\n  ])\r\n\r\n  return generateLayerConfig(chosenSegmentsFolders)\r\n}\r\n","import { capitalizeFirst } from '@utils/strings'\r\n\r\nexport function generateLayerConfig(chosenSegmentsFolders: string[]) {\r\n  return chosenSegmentsFolders.reduce((config, segmentFolder) => {\r\n    const configKey = `with${capitalizeFirst(segmentFolder)}`\r\n\r\n    config[configKey] = true\r\n\r\n    return config\r\n  }, {})\r\n}\r\n","import { createPrompt } from '@utils/inquirer/create-prompt'\r\n\r\nexport async function shouldGenerateDefaultConfigQuestion() {\r\n  const prompt = await createPrompt()\r\n\r\n  const { shouldGenerate } = await prompt<{ shouldGenerate: boolean }>([\r\n    {\r\n      name: 'shouldGenerate',\r\n      message: 'Generate default config:',\r\n      type: 'confirm'\r\n    }\r\n  ])\r\n\r\n  return shouldGenerate\r\n}\r\n","export * from './append-to-index'\r\nexport * from './create-component-files'\r\nexport * from './create-file'\r\nexport * from './create-file-if-not-exist'\r\nexport * from './go-up-folder'\r\nexport * from './is-dir-exist'\r\nexport * from './is-file-exist'\r\nexport * from './mkdir-if-not-exist'\r\nexport * from './remove-dir'\r\n","import { join } from 'path'\r\nimport { appendFileSync } from 'fs'\r\nimport { INDEX } from '@scripts/constants'\r\n\r\nimport { logger } from '../loggers'\r\n\r\nexport const appendToIndex = (path: string, fileName: string) => {\r\n  const content = `export * from './${fileName}'\\n`\r\n\r\n  try {\r\n    appendFileSync(join(path, INDEX), content)\r\n    logger.pushSuccessLog(\r\n      `File updated: ${join(path, INDEX).match(/src.*/)[0]}.`\r\n    )\r\n  } catch (error) {\r\n    logger.pushErrorLog(error)\r\n  }\r\n}\r\n","import { INDEX } from '@scripts/constants'\r\nimport {\r\n  generateComponentContent,\r\n  generateIndexContent\r\n} from '@scripts/project-generators/simple-structure/content-generators'\r\n\r\nimport { createFile } from './create-file'\r\n\r\nexport const createComponentFiles = (\r\n  directory: string,\r\n  componentName: string\r\n) => {\r\n  createFile(\r\n    directory,\r\n    `${componentName}.tsx`,\r\n    generateComponentContent(componentName)\r\n  )\r\n\r\n  createFile(directory, INDEX, generateIndexContent(componentName))\r\n}\r\n","export * from './common'\r\nexport * from './react'\r\n","export * from './generate-directory-path'\r\nexport * from './generate-index-content'\r\n","import { Folder } from '@scripts/constants'\r\n\r\nexport const generateDirectoryPath = (\r\n  directory: Folder,\r\n  componentName: string\r\n) => `${Folder.src}/${directory}/${componentName}`\r\n","export const generateIndexContent = (componentName: string) =>\r\n  `export * from './${componentName}'\r\n`\r\n","export * from './generate-component-content'\r\nexport * from './generate-page-content'\r\nexport * from './generate-hook-content'\r\n","import { REACT_COMPONENT } from '@scripts/templates'\r\nimport { capitalizeFirst, toCamelCase } from '@utils/strings'\r\n\r\nexport const generateComponentContent = (name: string) =>\r\n  REACT_COMPONENT(capitalizeFirst(toCamelCase(name)))\r\n","export * from './react-component.template'\r\nexport * from './feature-index.template'\r\nexport * from './hook.template'\r\nexport * from './page.template'\r\nexport * from './root-reducer.template'\r\nexport * from './redux-store.template'\r\n","export const REACT_COMPONENT = (\r\n  name: string\r\n) => `export interface ${name}Props {}\r\n\r\nexport const ${name} = ({}: ${name}Props) => {\r\n  return <div>${name}</div>\r\n}\r\n`\r\n","export const FEATURE_INDEX = `export * from './components'\r\nexport * from './hooks'\r\n`\r\n","export const HOOK = (name: string) => `export const ${name} = () => {\r\n\r\n}\r\n`\r\n","export const PAGE = (name: string) => `export const ${name} = () => {\r\n  return <div>${name}</div>\r\n}\r\n\r\n`\r\n","export const ROOT_REDUCER = `import { combineReducers } from '@reduxjs/toolkit'\r\n\r\nexport const rootReducer = combineReducers({})\r\n\r\nexport type RootReducerState = ReturnType<typeof rootReducer>\r\n\r\n`\r\n","export const REDUX_STORE = `import { configureStore } from '@reduxjs/toolkit'\r\nimport { rootReducer } from './reducers/root-reducer'\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware(),\r\n  ],\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n`\r\n","import { PAGE } from '@scripts/templates'\r\nimport { capitalizeFirst, toCamelCase } from '@utils/strings'\r\n\r\nexport const generatePageContent = (name: string) =>\r\n  PAGE(capitalizeFirst(toCamelCase(name)))\r\n","import { HOOK } from '@scripts/templates'\r\n\r\nexport const generateHookContent = (hookName: string) => HOOK(hookName)\r\n","import { join } from 'path'\r\nimport { writeFileSync } from 'fs'\r\n\r\nimport { logger } from '../loggers'\r\n\r\nexport const createFile = (\r\n  directory: string,\r\n  fileName: string,\r\n  content: string = ''\r\n) => {\r\n  try {\r\n    const path = join(directory, fileName)\r\n    writeFileSync(path, content)\r\n\r\n    logger.pushSuccessLog(`File created: ${path.match(/src.*/)[0]}.`)\r\n  } catch (error) {\r\n    logger.pushErrorLog(error)\r\n  }\r\n}\r\n","import { readFileSync } from 'fs'\r\nimport { join } from 'path'\r\nimport { createFile } from './create-file'\r\n\r\nexport const createFileIfNotExist = (\r\n  directory: string,\r\n  fileName: string,\r\n  content: string = ''\r\n) => {\r\n  try {\r\n    readFileSync(join(directory, fileName))\r\n  } catch (error) {\r\n    createFile(directory, fileName, content)\r\n  }\r\n}\r\n","import { accessSync } from 'fs'\r\n\r\nexport const isDirExist = (path: string) => {\r\n  try {\r\n    accessSync(path)\r\n    return true\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n","import { readdirSync } from 'fs'\r\n\r\nexport const isFileExist = (root: string, fileName: string) => {\r\n  try {\r\n    return readdirSync(root).includes(fileName)\r\n  } catch (error) {\r\n    return false\r\n  }\r\n}\r\n","import { join } from 'path'\r\nimport { mkdirSync } from 'fs'\r\n\r\nimport { logger } from '../loggers'\r\nimport { isDirExist } from './is-dir-exist'\r\n\r\nexport const mkdirIfNotExist = (root: string, dir: string) => {\r\n  try {\r\n    const path = join(root, dir)\r\n    if (!isDirExist(path)) {\r\n      mkdirSync(path)\r\n      logger.pushSuccessLog(`Folder created: ${path.match(/src.*/)[0]}.`)\r\n    }\r\n  } catch (error) {\r\n    logger.pushErrorLog(error)\r\n  }\r\n}\r\n","import { rmSync } from 'fs'\r\n\r\nexport const removeDir = (path: string) => {\r\n  try {\r\n    rmSync(path, {\r\n      recursive: true,\r\n      force: true\r\n    })\r\n  } catch (error) {}\r\n}\r\n","export * from './handle-fail'\r\n","import { cli } from '@services/cli'\r\nimport { logger } from '@utils/loggers'\r\n\r\nimport { missingArgumentError } from './errors'\r\n\r\nexport const handleFail = (message: string) => {\r\n  const command = cli.inputCommand\r\n  const missingCommandsCount = +message.match(/\\d/)[0]\r\n  logger.pushErrorLog(missingArgumentError[command](missingCommandsCount))\r\n\r\n  throw new Error()\r\n}\r\n","import type { MissingArgumentError } from '../executors/types'\r\n\r\nconst MISSING_ARGUMENT = 'Missing argument'\r\n\r\nconst MISSING_NAME = (layerName: string) =>\r\n  `${MISSING_ARGUMENT}: \"${layerName}-name\"!`\r\n\r\nconst MISSING_COMPONENT_NAME = `${MISSING_ARGUMENT}: \"component-name\"!`\r\n\r\nconst MISSING_ARGUMENTS = (layerName: string) =>\r\n  `${MISSING_ARGUMENT}s: \"${layerName}-name\" \"component-name\"!`\r\n\r\nconst missingErrorByCount = (argumentCount: number, layerName: string) =>\r\n  argumentCount === 1 ? MISSING_COMPONENT_NAME : MISSING_ARGUMENTS(layerName)\r\n\r\nconst ErrorHandler = {\r\n  entity: () => MISSING_NAME('entity'),\r\n  entityUI: (argumentCount: number) =>\r\n    missingErrorByCount(argumentCount, 'entity'),\r\n\r\n  feature: () => MISSING_NAME('feature'),\r\n  featureUI: (argumentCount: number) =>\r\n    missingErrorByCount(argumentCount, 'feature'),\r\n\r\n  page: () => MISSING_NAME('page'),\r\n  widget: () => MISSING_NAME('widget'),\r\n  sharedUI: () => MISSING_COMPONENT_NAME,\r\n\r\n  component: () => MISSING_NAME('component'),\r\n  hook: () => MISSING_NAME('hook')\r\n}\r\n\r\nexport const missingArgumentError: MissingArgumentError = {\r\n  e: ErrorHandler.entity,\r\n  eu: ErrorHandler.entityUI,\r\n  entity: ErrorHandler.entity,\r\n  'entity-ui': ErrorHandler.entityUI,\r\n  f: ErrorHandler.feature,\r\n  fu: ErrorHandler.featureUI,\r\n  feature: ErrorHandler.feature,\r\n  'feature-ui': ErrorHandler.featureUI,\r\n  w: ErrorHandler.widget,\r\n  widget: ErrorHandler.widget,\r\n  su: ErrorHandler.sharedUI,\r\n  'shared-ui': ErrorHandler.sharedUI,\r\n  p: ErrorHandler.page,\r\n  page: ErrorHandler.page,\r\n  c: ErrorHandler.component,\r\n  component: ErrorHandler.component,\r\n  h: ErrorHandler.hook,\r\n  hook: ErrorHandler.hook\r\n}\r\n","export interface InputParameters {\r\n  name: string\r\n  componentName: string\r\n}\r\n\r\nexport type NameParameter = Pick<InputParameters, 'name'>\r\n\r\nexport enum Parameter {\r\n  full = '<name> <componentName>',\r\n  name = '<name>'\r\n}\r\n\r\nexport interface CommandConfig {\r\n  command: FsdCommand | SimpleCommand\r\n  parameter?: Parameter\r\n  alias?: FsdCommandAlias | SimpleCommandAlias\r\n  describe?: string\r\n  handler: (name: string, componentName?: string) => void\r\n}\r\n\r\nexport enum SimpleCommand {\r\n  component = 'c',\r\n  page = 'p',\r\n  hook = 'h'\r\n}\r\n\r\nexport enum SimpleCommandAlias {\r\n  component = 'component',\r\n  page = 'page',\r\n  hook = 'hook'\r\n}\r\n\r\nexport type AvailableSimpleCommands = (typeof availableFsdCommands)[number]\r\n\r\nexport enum FsdCommand {\r\n  init = 'init',\r\n  entity = 'e',\r\n  feature = 'f',\r\n  page = 'p',\r\n  widget = 'w',\r\n  entityUI = 'eu',\r\n  featureUI = 'fu',\r\n  sharedUI = 'su'\r\n}\r\n\r\nexport enum FsdCommandAlias {\r\n  entity = 'entity',\r\n  feature = 'feature',\r\n  page = 'page',\r\n  widget = 'widget',\r\n  entityUI = 'entity-ui',\r\n  featureUI = 'feature-ui',\r\n  sharedUI = 'shared-ui'\r\n}\r\n\r\nexport const availableSimpleCommands = [\r\n  ...Object.values(SimpleCommand),\r\n  ...Object.values(SimpleCommandAlias)\r\n] as const\r\n\r\nexport const availableFsdCommands = [\r\n  ...Object.values(FsdCommand),\r\n  ...Object.values(FsdCommandAlias)\r\n] as const\r\n\r\nexport const allAvailableCommands = [\r\n  ...Object.values(availableFsdCommands),\r\n  ...Object.values(availableSimpleCommands),\r\n  'config'\r\n] as const\r\n\r\nexport type AvailableFsdCommands = (typeof availableFsdCommands)[number]\r\n\r\nexport type AllAvailableCommands = (typeof allAvailableCommands)[number]\r\n\r\nexport type MissingArgumentError = Record<\r\n  Exclude<AllAvailableCommands, 'init' | 'config'>,\r\n  (argumentCount: number) => string\r\n>\r\n","export * from './fsd-execute'\r\n","import { cli } from '@services/cli'\r\n\r\nimport { commands } from './commands'\r\n\r\nimport type { CommandConfig, InputParameters } from '../types'\r\n\r\nfunction addCommand({\r\n  command,\r\n  parameter,\r\n  alias,\r\n  describe,\r\n  handler\r\n}: CommandConfig) {\r\n  cli.yargs.command<InputParameters>({\r\n    command: parameter ? `${command} ${parameter}` : command,\r\n    aliases: alias,\r\n    describe,\r\n    handler: ({ name, componentName }) => {\r\n      handler(name, componentName)\r\n    }\r\n  })\r\n  return addCommand\r\n}\r\n\r\nexport function fsdExecute(): void {\r\n  commands.forEach(addCommand)\r\n}\r\n","import {\r\n  entityComponentGenerator,\r\n  entityGenerator\r\n} from '@scripts/project-generators/fsd-structure/entity'\r\nimport {\r\n  featureComponentGenerator,\r\n  featureGenerator\r\n} from '@scripts/project-generators/fsd-structure/feature'\r\nimport { initProject } from '@scripts/project-generators/fsd-structure/init-project'\r\nimport { pageGenerator } from '@scripts/project-generators/fsd-structure/page-generator'\r\nimport { widgetGenerator } from '@scripts/project-generators/fsd-structure/widget-generator'\r\nimport { sharedComponentGenerator } from '@scripts/project-generators/fsd-structure/shared-component-generator'\r\n\r\nimport { FsdCommand, FsdCommandAlias, Parameter } from '../types'\r\n\r\nimport type { CommandConfig } from '../types'\r\n\r\nconst addEntityConfig: CommandConfig = {\r\n  command: FsdCommand.entity,\r\n  parameter: Parameter.name,\r\n  alias: FsdCommandAlias.entity,\r\n  describe: 'add new entity',\r\n  handler: entityGenerator\r\n}\r\nconst addEntityUIConfig: CommandConfig = {\r\n  command: FsdCommand.entityUI,\r\n  parameter: Parameter.full,\r\n  alias: FsdCommandAlias.entityUI,\r\n  describe: 'add new component for entity',\r\n  handler: entityComponentGenerator\r\n}\r\nconst addFeatureConfig: CommandConfig = {\r\n  command: FsdCommand.feature,\r\n  parameter: Parameter.name,\r\n  alias: FsdCommandAlias.feature,\r\n  describe: 'add new feature',\r\n  handler: featureGenerator\r\n}\r\nconst addFeatureUIConfig: CommandConfig = {\r\n  command: FsdCommand.featureUI,\r\n  parameter: Parameter.full,\r\n  alias: FsdCommandAlias.featureUI,\r\n  describe: 'add new component for entity',\r\n  handler: featureComponentGenerator\r\n}\r\nconst addPageConfig: CommandConfig = {\r\n  command: FsdCommand.page,\r\n  parameter: Parameter.name,\r\n  alias: FsdCommandAlias.page,\r\n  describe: 'add new entity',\r\n  handler: pageGenerator\r\n}\r\nconst addWidgetConfig: CommandConfig = {\r\n  command: FsdCommand.widget,\r\n  parameter: Parameter.name,\r\n  alias: FsdCommandAlias.widget,\r\n  describe: 'add new widget',\r\n  handler: widgetGenerator\r\n}\r\nconst addSharedUIConfig: CommandConfig = {\r\n  command: FsdCommand.sharedUI,\r\n  parameter: Parameter.name,\r\n  alias: FsdCommandAlias.sharedUI,\r\n  describe: 'add new shared component',\r\n  handler: sharedComponentGenerator\r\n}\r\n\r\nconst initConfig: CommandConfig = {\r\n  command: FsdCommand.init,\r\n  describe: 'Generate initial structure of project.',\r\n  handler: initProject\r\n}\r\n\r\nexport const commands: CommandConfig[] = [\r\n  addEntityConfig,\r\n  addEntityUIConfig,\r\n  addFeatureConfig,\r\n  addFeatureUIConfig,\r\n  addPageConfig,\r\n  addWidgetConfig,\r\n  addSharedUIConfig,\r\n  initConfig\r\n] as const\r\n","export * from './entity-component-generator'\r\nexport * from './entity-generator'\r\n","import { Folder } from '@scripts/constants'\r\n\r\nimport { sliceComponentGenerator } from '../slice/slice-component-generator'\r\n\r\nexport const entityComponentGenerator = (\r\n  entityName: string,\r\n  componentName: string\r\n) => {\r\n  sliceComponentGenerator(Folder.entities, entityName, componentName)\r\n}\r\n","import { join } from 'path'\r\nimport {\r\n  appendToIndex,\r\n  createComponentFiles,\r\n  isDirExist,\r\n  mkdirIfNotExist\r\n} from '@utils/file-system'\r\nimport { logger } from '@utils/loggers'\r\nimport { Folder } from '@scripts/constants'\r\n\r\nimport { getLayerPath } from './helpers'\r\n\r\nimport type { Layer } from './types'\r\n\r\nexport const sliceComponentGenerator = (\r\n  layer: Layer,\r\n  sliceName: string,\r\n  componentName: string\r\n) => {\r\n  const layerPath = getLayerPath(layer, sliceName)\r\n  if (!isDirExist(layerPath)) {\r\n    logger.pushNotExistLog(sliceName, layer)\r\n    return\r\n  }\r\n\r\n  const sliceUiPath = join(layerPath, Folder.ui)\r\n  if (isDirExist(join(sliceUiPath, componentName))) {\r\n    logger.pushAlreadyExistLog(\r\n      componentName,\r\n      `component of ${sliceName} ${layer}`\r\n    )\r\n    return\r\n  }\r\n\r\n  mkdirIfNotExist(sliceUiPath, componentName)\r\n  createComponentFiles(join(sliceUiPath, componentName), componentName)\r\n  appendToIndex(sliceUiPath, componentName)\r\n}\r\n","export * from './get-layer-folder-path'\r\nexport * from './get-layer-path'\r\nexport * from './create-lib'\r\nexport * from './create-ui'\r\n","import { join } from 'path'\r\nimport { Folder } from '@scripts/constants'\r\n\r\nimport type { Layer } from '../types'\r\n\r\nexport const getLayerFolderPath = (layer: Layer) =>\r\n  join(Folder.src, Folder[layer])\r\n","import { join } from 'path'\r\nimport { getLayerFolderPath } from './get-layer-folder-path'\r\nimport type { Layer } from '../types'\r\n\r\nexport const getLayerPath = (layer: Layer, name: string) => {\r\n  const layerFolderPath = getLayerFolderPath(layer)\r\n\r\n  return name ? join(layerFolderPath, name) : layerFolderPath\r\n}\r\n","import { join } from 'path'\r\nimport { Folder, INDEX } from '@scripts/constants'\r\nimport { createFile, mkdirIfNotExist } from '@utils/file-system'\r\n\r\nexport const createLib = (path: string) => {\r\n  mkdirIfNotExist(path, Folder.lib)\r\n\r\n  const layerLibPath = join(path, Folder.lib)\r\n\r\n  mkdirIfNotExist(layerLibPath, Folder.hooks)\r\n  mkdirIfNotExist(layerLibPath, Folder.helpers)\r\n\r\n  createFile(join(layerLibPath, Folder.hooks), INDEX)\r\n  createFile(join(layerLibPath, Folder.helpers), INDEX)\r\n}\r\n","import { join } from 'path'\r\nimport { Folder, INDEX } from '@scripts/constants'\r\nimport { createFile, mkdirIfNotExist } from '@utils/file-system'\r\n\r\nexport const createUi = (path: string) => {\r\n  mkdirIfNotExist(path, Folder.ui)\r\n  createFile(join(path, Folder.ui), INDEX)\r\n}\r\n","import { Folder } from '@scripts/constants'\r\n\r\nimport { sliceGenerator } from '../slice/slice-generator'\r\n\r\nexport const entityGenerator = (name: string) => {\r\n  sliceGenerator(Folder.entities, name)\r\n}\r\n","import { logger } from '@utils/loggers'\r\nimport { Folder } from '@scripts/constants'\r\nimport { configService } from '@services/config'\r\nimport { isDirExist, mkdirIfNotExist } from '@utils/file-system'\r\n\r\nimport {\r\n  createLib,\r\n  createUi,\r\n  getLayerFolderPath,\r\n  getLayerPath\r\n} from './helpers'\r\n\r\nimport type { Layer } from './types'\r\n\r\nexport const sliceGenerator = (layer: Layer, sliceName: string) => {\r\n  const layerFolderPath = getLayerFolderPath(layer)\r\n  const layerPath = getLayerPath(layer, sliceName)\r\n\r\n  mkdirIfNotExist(Folder.src, Folder[layer])\r\n\r\n  if (isDirExist(layerPath)) {\r\n    logger.pushAlreadyExistLog(sliceName, layer)\r\n    return false\r\n  }\r\n\r\n  mkdirIfNotExist(layerFolderPath, sliceName)\r\n\r\n  const {\r\n    withApi,\r\n    withAssets,\r\n    withConfig,\r\n    withTypes,\r\n    withUi,\r\n    withLib,\r\n    withModel\r\n  } = configService.getSliceConfig(layer)\r\n\r\n  if (withUi) createUi(layerPath)\r\n\r\n  if (withLib) createLib(layerPath)\r\n\r\n  if (withApi) mkdirIfNotExist(layerPath, Folder.api)\r\n\r\n  if (withModel) mkdirIfNotExist(layerPath, Folder.model)\r\n\r\n  if (withAssets) mkdirIfNotExist(layerPath, Folder.assets)\r\n\r\n  if (withConfig) mkdirIfNotExist(layerPath, Folder.config)\r\n\r\n  if (withTypes) mkdirIfNotExist(layerPath, Folder.types)\r\n\r\n  return true\r\n}\r\n","export * from './feature-component-generator'\r\nexport * from './feature-generator'\r\n","import { Folder } from '@scripts/constants'\r\n\r\nimport { sliceComponentGenerator } from '../slice/slice-component-generator'\r\n\r\nexport const featureComponentGenerator = (\r\n  featureName: string,\r\n  componentName: string\r\n) => {\r\n  sliceComponentGenerator(Folder.features, featureName, componentName)\r\n}\r\n","import { Folder } from '@scripts/constants'\r\n\r\nimport { sliceGenerator } from '../slice/slice-generator'\r\n\r\nexport const featureGenerator = (name: string) => {\r\n  sliceGenerator(Folder.features, name)\r\n}\r\n","import { join } from 'path'\r\nimport { readFileSync } from 'fs'\r\nimport {\r\n  createComponentFiles,\r\n  createFileIfNotExist,\r\n  mkdirIfNotExist\r\n} from '@utils/file-system'\r\nimport { configService } from '@services/config'\r\nimport { Folder, INDEX } from '@scripts/constants'\r\n\r\nconst mkAppFolder = () => {\r\n  const { withProviders } = configService.getAppConfig()\r\n\r\n  const appFolderPath = join(Folder.src, Folder.app)\r\n\r\n  mkdirIfNotExist(Folder.src, Folder.app)\r\n  if (withProviders) mkdirIfNotExist(appFolderPath, Folder.providers)\r\n  const path = join(appFolderPath, `${Folder.app}.tsx`)\r\n  try {\r\n    readFileSync(path)\r\n  } catch (error) {\r\n    createComponentFiles(appFolderPath, Folder.app)\r\n  }\r\n}\r\n\r\nconst mkSharedFolder = () => {\r\n  const sharedFolderPath = join(Folder.src, Folder.shared)\r\n\r\n  mkdirIfNotExist(Folder.src, Folder.shared)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.ui)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.assets)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.lib)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.api)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.config)\r\n  mkdirIfNotExist(sharedFolderPath, Folder.types)\r\n}\r\n\r\nconst mkPagesFolder = () => {\r\n  mkdirIfNotExist(Folder.src, Folder.pages)\r\n  createFileIfNotExist(join(Folder.src, Folder.pages), INDEX)\r\n}\r\n\r\nexport const initProject = () => {\r\n  mkAppFolder()\r\n  mkSharedFolder()\r\n  mkPagesFolder()\r\n  mkdirIfNotExist(Folder.src, Folder.widgets)\r\n  mkdirIfNotExist(Folder.src, Folder.features)\r\n  mkdirIfNotExist(Folder.src, Folder.entities)\r\n}\r\n","import { join } from 'path'\r\nimport {\r\n  appendToIndex,\r\n  createComponentFiles,\r\n  createFile\r\n} from '@utils/file-system'\r\nimport { Folder, INDEX } from '@scripts/constants'\r\n\r\nimport { sliceGenerator } from './slice/slice-generator'\r\nimport { generateIndexContent } from '../simple-structure/content-generators'\r\n\r\nexport const pageGenerator = (name: string) => {\r\n  const pageFolderPath = join(Folder.src, Folder.pages)\r\n  const pagePath = join(pageFolderPath, name)\r\n  const pageUiPath = join(pagePath, Folder.ui)\r\n\r\n  const result = sliceGenerator(Folder.pages, name)\r\n\r\n  if (!result) {\r\n    return\r\n  }\r\n\r\n  createComponentFiles(pageUiPath, name)\r\n  createFile(pagePath, INDEX, generateIndexContent(Folder.ui))\r\n\r\n  appendToIndex(pageFolderPath, name)\r\n}\r\n","import { join } from 'path'\r\nimport { Folder } from '@scripts/constants'\r\nimport { appendToIndex, createComponentFiles } from '@utils/file-system'\r\n\r\nimport { sliceGenerator } from './slice/slice-generator'\r\n\r\nexport const widgetGenerator = (name: string) => {\r\n  const widgetFolderPath = join(Folder.src, Folder.widgets)\r\n  const widgetPath = join(widgetFolderPath, name)\r\n  const widgetUiPath = join(widgetPath, Folder.ui)\r\n\r\n  const result = sliceGenerator(Folder.widgets, name)\r\n\r\n  if (!result) {\r\n    return\r\n  }\r\n\r\n  createComponentFiles(widgetUiPath, name)\r\n\r\n  appendToIndex(widgetFolderPath, name)\r\n}\r\n","import { Folder } from '@scripts/constants'\r\n\r\nimport { sliceComponentGenerator } from './slice/slice-component-generator'\r\n\r\nexport const sharedComponentGenerator = (componentName: string) => {\r\n  sliceComponentGenerator(Folder.shared, '', componentName)\r\n}\r\n","import { cli } from '@services/cli'\r\n\r\nimport { commands } from './commands'\r\n\r\nimport type { CommandConfig, InputParameters } from '../types'\r\n\r\nfunction addCommand({\r\n  command,\r\n  parameter,\r\n  alias,\r\n  describe,\r\n  handler\r\n}: CommandConfig) {\r\n  cli.yargs.command<InputParameters>({\r\n    command: parameter ? `${command} ${parameter}` : command,\r\n    aliases: alias,\r\n    describe,\r\n    handler: ({ name, componentName }) => {\r\n      handler(name, componentName)\r\n    }\r\n  })\r\n  return addCommand\r\n}\r\n\r\nexport function simpleExecute(): void {\r\n  commands.forEach(addCommand)\r\n}\r\n","import {\r\n  generateComponent,\r\n  generateHook,\r\n  generatePage\r\n} from '@scripts/project-generators/simple-structure/component-generators'\r\n\r\nimport { Parameter, SimpleCommand, SimpleCommandAlias } from '../types'\r\n\r\nimport type { CommandConfig } from '../types'\r\n\r\nconst generateComponentConfig: CommandConfig = {\r\n  command: SimpleCommand.component,\r\n  parameter: Parameter.name,\r\n  alias: SimpleCommandAlias.component,\r\n  describe: 'add new component',\r\n  handler: generateComponent\r\n}\r\n\r\nconst generatePageConfig: CommandConfig = {\r\n  command: SimpleCommand.page,\r\n  parameter: Parameter.name,\r\n  alias: SimpleCommandAlias.page,\r\n  describe: 'add new page',\r\n  handler: generatePage\r\n}\r\n\r\nconst generateHookConfig: CommandConfig = {\r\n  command: SimpleCommand.hook,\r\n  parameter: Parameter.name,\r\n  alias: SimpleCommandAlias.hook,\r\n  describe: 'add new hook',\r\n  handler: generateHook\r\n}\r\n\r\nexport const commands: CommandConfig[] = [\r\n  generateComponentConfig,\r\n  generatePageConfig,\r\n  generateHookConfig\r\n] as const\r\n","export * from './generate-component'\r\nexport * from './generate-page'\r\nexport * from './generate-hook'\r\n","import { mkdirSync } from 'fs'\r\nimport {\r\n  createComponentFiles,\r\n  isDirExist,\r\n  mkdirIfNotExist\r\n} from '@utils/file-system'\r\nimport { logger } from '@utils/loggers'\r\nimport { Folder } from '@scripts/constants'\r\n\r\nimport { generateDirectoryPath } from '../content-generators'\r\n\r\nexport const generateComponent = (componentName: string, path: string) => {\r\n  mkdirIfNotExist(Folder.src, Folder.components)\r\n\r\n  const directoryPath = generateDirectoryPath(Folder.components, componentName)\r\n\r\n  if (isDirExist(path ?? directoryPath)) {\r\n    logger.pushAlreadyExistLog(componentName, 'component')\r\n    return\r\n  }\r\n\r\n  try {\r\n    mkdirSync(path ?? directoryPath)\r\n    createComponentFiles(path ?? directoryPath, componentName)\r\n  } catch (error) {\r\n    logger.pushErrorLog(error)\r\n  }\r\n}\r\n","import { readdirSync } from 'fs'\r\nimport {\r\n  appendToIndex,\r\n  createFile,\r\n  isFileExist,\r\n  mkdirIfNotExist\r\n} from '@utils/file-system'\r\nimport { logger } from '@utils/loggers'\r\nimport { Folder, INDEX, PAGE_FOLDER_PATH } from '@scripts/constants'\r\n\r\nimport { generatePageContent } from '../content-generators'\r\n\r\nexport const generatePage = (pageName: string) => {\r\n  mkdirIfNotExist(Folder.src, Folder.pages)\r\n\r\n  if (isFileExist(PAGE_FOLDER_PATH, `${pageName}.tsx`)) {\r\n    logger.pushAlreadyExistLog(pageName, 'page')\r\n    return\r\n  }\r\n\r\n  createFile(PAGE_FOLDER_PATH, `${pageName}.tsx`, generatePageContent(pageName))\r\n\r\n  const files = readdirSync(PAGE_FOLDER_PATH)\r\n  if (files.includes(INDEX)) {\r\n    appendToIndex(PAGE_FOLDER_PATH, pageName)\r\n  } else {\r\n    createFile(PAGE_FOLDER_PATH, INDEX, `export * from './${pageName}'\\n`)\r\n  }\r\n}\r\n","import { join } from 'path'\r\nimport {\r\n  appendToIndex,\r\n  createFile,\r\n  isFileExist,\r\n  mkdirIfNotExist\r\n} from '@utils/file-system'\r\nimport { logger } from '@utils/loggers'\r\nimport { toCamelCase } from '@utils/strings'\r\nimport { Folder } from '@scripts/constants'\r\n\r\nimport { generateHookContent } from '../content-generators'\r\n\r\nexport const generateHook = (hookName: string, path?: string) => {\r\n  mkdirIfNotExist(Folder.src, Folder.hooks)\r\n\r\n  const directoryPath = join(Folder.src, Folder.hooks)\r\n\r\n  if (isFileExist(directoryPath, `${hookName}.ts`)) {\r\n    logger.pushAlreadyExistLog(hookName, 'hook')\r\n    return\r\n  }\r\n\r\n  const content = generateHookContent(toCamelCase(hookName))\r\n\r\n  createFile(path ?? directoryPath, `${hookName}.ts`, content)\r\n  appendToIndex(path ?? directoryPath, hookName)\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../../"}